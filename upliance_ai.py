# -*- coding: utf-8 -*-
"""Upliance.AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yBjKpFSD095H2B-kM5bO4CXeo5k2W--w

UserDetails, CookingSessions, andOrderDetails.
"""

import pandas as pd
# import pandas library

file_path = '/content/Assignment.xlsx'  # Update this to your file path   # Load the Excel file
user_details = pd.read_excel('/content/Assignment.xlsx', sheet_name='UserDetails.csv')
cooking_sessions = pd.read_excel('/content/Assignment.xlsx', sheet_name='CookingSessions.csv')
order_details = pd.read_excel('/content/Assignment.xlsx', sheet_name='OrderDetails.csv')

user_details = user_details.drop_duplicates()   # Data Cleaning   # Remove duplicates
cooking_sessions = cooking_sessions.drop_duplicates()
order_details = order_details.drop_duplicates()

user_details['Registration Date'] = pd.to_datetime(user_details['Registration Date'])   # Convert date columns to datetime
cooking_sessions['Session Start'] = pd.to_datetime(cooking_sessions['Session Start'])
cooking_sessions['Session End'] = pd.to_datetime(cooking_sessions['Session End'])
order_details['Order Date'] = pd.to_datetime(order_details['Order Date'])

order_details['Rating'] = order_details['Rating'].fillna(order_details['Rating'].mean())    #Fill missing values

sessions_orders = pd.merge(cooking_sessions, order_details, on='Session ID', suffixes=('_session', '_order'))   # Merge CookingSessions with OrderDetails using Session ID

sessions_orders.columns = sessions_orders.columns.str.strip()
user_details.columns = user_details.columns.str.strip()

# Check if 'User ID' exists in both DataFrames
print("Sessions Orders Columns:", sessions_orders.columns)
print("User Details Columns:", user_details.columns)

# Perform the merge
#merged_data = pd.merge(sessions_orders, user_details, on='User ID')

sessions_orders.rename(columns={' User ID': 'User ID_session'}, inplace=True)
user_details.rename(columns={' User ID': 'User ID'}, inplace=True)

# Rename the column in the DataFrame
sessions_orders.rename(columns={'User ID_session': 'User ID'}, inplace=True)

# Verify the change
print(sessions_orders.columns)

# Display column names for both DataFrames
print("Columns in sessions_orders:", sessions_orders.columns)
print("Columns in user_details:", user_details.columns)

sessions_orders['User ID'] = sessions_orders['User ID'].astype(str)
user_details['User ID'] = user_details['User ID'].astype(str)

merged_data = pd.merge(sessions_orders, user_details, on='User ID')   # Merge the result with UserDetails using User ID

popular_dishes = merged_data['Dish Name_order'].value_counts()   # Most popular dishes based on the number of orders
print("Most Popular Dishes:\n", popular_dishes)

correlation = merged_data[['Session Rating', 'Rating']].corr()            # To analyze correlation between session ratings and order ratings
print("Correlation between session rating and order rating:\n", correlation)

orders_by_location = merged_data['Location'].value_counts()  # Orders by location
print("Orders by Location:\n", orders_by_location)

merged_data['Age Group'] = pd.cut(merged_data['Age'], bins=[18, 30, 40, 50, 60], labels=['18-30', '31-40', '41-50', '51-60'])
orders_by_age_group = merged_data['Age Group'].value_counts()
print("Orders by Age Group:\n", orders_by_age_group)            # Age group analysis

total_revenue = merged_data['Amount (USD)'].sum()
print("Total Revenue: $", total_revenue)

avg_orders_per_user = merged_data.groupby('User ID')['Order ID'].count().mean()
print("Average Orders per User:", avg_orders_per_user)

import matplotlib.pyplot as plt       #Import Visualization Libraries
import seaborn as sns

plt.figure(figsize=(8, 6))                          #Distribution of User Age
sns.histplot(user_details['Age'], bins=10, kde=True, color='blue')
plt.title('Distribution of User Ages', fontsize=16)
plt.xlabel('Age', fontsize=12)
plt.ylabel('Frequency', fontsize=12)
plt.show()

# Count of orders for each dish       Popular Dishes Based on Orders
popular_dishes = sessions_orders['Dish Name_session'].value_counts()

plt.figure(figsize=(10, 6))
popular_dishes.plot(kind='bar', color='orange')
plt.title('Most Popular Dishes', fontsize=16)
plt.xlabel('Dish Name', fontsize=12)
plt.ylabel('Number of Orders', fontsize=12)
plt.xticks(rotation=45)
plt.show()

plt.figure(figsize=(8, 6))          #Session Duration by Meal Type
sns.boxplot(x='Meal Type', y='Duration (mins)', data=cooking_sessions, palette='Set2')
plt.title('Session Duration by Meal Type', fontsize=16)
plt.xlabel('Meal Type', fontsize=12)
plt.ylabel('Duration (minutes)', fontsize=12)
plt.show()

revenue_by_time = order_details.groupby('Time of Day')['Amount (USD)'].sum().sort_values()    #Revenue by Time of Day

plt.figure(figsize=(8, 6))
revenue_by_time.plot(kind='bar', color='green')
plt.title('Revenue by Time of Day', fontsize=16)
plt.xlabel('Time of Day', fontsize=12)
plt.ylabel('Total Revenue (USD)', fontsize=12)
plt.xticks(rotation=0)
plt.show()

plt.figure(figsize=(10, 6))           #Correlation Heatmap
correlation_matrix = merged_data[['Session Rating', 'Rating', 'Duration (mins)', 'Amount (USD)']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Heatmap', fontsize=16)
plt.show()

orders_by_location = user_details.groupby('Location')['Total Orders'].sum()     #Orders by Location

plt.figure(figsize=(12, 6))
orders_by_location.sort_values(ascending=False).plot(kind='bar', color='purple')
plt.title('Total Orders by Location', fontsize=16)
plt.xlabel('Location', fontsize=12)
plt.ylabel('Total Orders', fontsize=12)
plt.xticks(rotation=45)
plt.show()